user  root;
#CPU个数的两倍
worker_processes 4;

error_log /home/logs/nginx/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid logs/nginx.pid;

events {
    #epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能
    use epoll;
    #收到一个新连接通知后接受尽可能多的连接
    multi_accept on;
    #单个后台worker process进程的最大并发链接数
    worker_connections 2048;
}

#worker进程的最大打开文件数限制
worker_rlimit_nofile 20480;

#安装推荐 https://segmentfault.com/a/1190000002797601
#配置参考 http://seanlook.com/2015/05/17/nginx-install-and-config/
#        https://imququ.com/post/my-nginx-conf.html
#        http://www.zhuxiaodong.net/2016/configure-nginx-server-support-https-http2-on-centos7/

http {
    include mime.types;
    default_type application/octet-stream;
    charset utf-8;

    #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址
    #$remote_user:用来记录客户端用户名称
    #$time_local:用来记录访问时间与时区
    #$request:用来记录请求的url与http协议
    #$status:用来记录请求状态；成功是200
    #$body_bytes_sent:记录发送给客户端文件主体内容大小
    #$http_referer:用来记录从那个页面链接访问过来的
    #$http_user_agent:记录客户浏览器的相关信息
    log_format main '$time_local $remote_addr $status $request_time $upstream_response_time - "$request" $body_bytes_sent "$http_referer" "$http_x_forwarded_for" "$http_user_agent"';
    log_format ssl '$time_local $remote_addr $status $request_time $upstream_response_time - "$request" $body_bytes_sent "$http_referer" "$http_x_forwarded_for" "$http_user_agent" $ssl_protocol $ssl_cipher $ssl_session_id $ssl_session_reused';

    sendfile on;
    #在一个数据包里发送所有头文件,而不一个接一个的发送
    tcp_nopush on;
    #关闭合并算法,缓存有数据就发送,不等待数据合并,在请求响应式服务中可提升响应速度
    tcp_nodelay on;

    #服务器将在这个超时时间过后关闭链接
    keepalive_timeout 60;
    #设置一个keep-alive连接上可以服务的请求的最大数量,当最大请求数量达到时,连接被关闭,默认是100
    keepalive_requests 5000;

    #客户端请求头部的缓冲区大小,这个可以根据你的系统分页大小来设置,分页大小可以用命令getconf PAGESIZE
    #也有client_header_buffer_size超过4k的情况,client_header_buffer_size该值必须设置为“系统分页大小”的整倍数
    client_header_buffer_size 4k;
    large_client_header_buffers 4 4k;
    #设置请求头的超时时间
    client_header_timeout 10;
    #设置请求体的超时时间
    client_body_timeout 30;
    #客户端发送请求体最大大小
    client_max_body_size 20m;
    #缓冲区代理缓冲用户端请求的最大字节数
    client_body_buffer_size 128k;
    #关闭不响应的客户端连接,这将会释放那个客户端所占有的内存空间
    reset_timedout_connection on;
    #指定客户端的响应超时时间,在这段时间内客户端没有读取任何数据,nginx就会关闭连接
    send_timeout 30;

    #防止http proxy攻击
    fastcgi_param HTTP_PROXY "";

    gzip on;
    #指定的客户端禁用gzip功能,设置成IE6或者更低版本
    gzip_disable "MSIE [1-6].";
    #设置允许压缩的页面最小字节数
    gzip_min_length 1k;
    #设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。 例如 4 4k 代表以4k为单位,按照原始数据大小以4k为单位的4倍申请内存
    gzip_buffers 4 16k;
    gzip_http_version 1.1;
    #gzip压缩比/压缩级别,压缩级别 1-9,级别越高压缩率越大,当然压缩时间也就越长,默认值：1，保持默认即可,级别越高服务器压力越大,默认通常是够用的
    gzip_comp_level 1;
    #gzip压缩的文件mime类型
    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;
    #Nginx作为反向代理的时候启用,决定后端服务器返回的结果是否压缩
    #匹配的前提是后端服务器必须要返回包含”Via”的 header头
    gzip_proxied any;
    #根据客户端的HTTP头来判断,是否需要压缩
    gzip_vary on;

    #关闭nginx版本信息
    server_tokens off;

    #定义一个limit_req_zone用来存储session
    #名为allips,以$binary_remote_addr为key,10M内存大小,限制平均每秒的请求为20个
    #1M能存储16000个状态,rete的值必须为整数
    #如果限制两秒钟一个请求,可以设置成30r/m
    limit_req_zone $binary_remote_addr zone=allips:10m rate=20r/s;

    #limit_zone只能定义在http作用域,limit_conn可以定义在http server location作用域
    #定义一个名为one,以$binary_remote_addr为key,10M内存大小的limit_zone来存储session
    #nginx 1.1.8以后用limit_conn_zone替换了limit_zone且只能放在http作用域
    limit_conn_zone one $binary_remote_addr 10m;

    #geo指令定义了一个白名单$limited变量,默认值为1,如果客户端ip在上面的范围内,$limited的值为0
    geo $limited {
        default 1;
        127.0.0.1/32 0;
        123.456.0.0/28 0;
    }

    #使用map指令映射搜索引擎客户端的ip为空串,如果不是搜索引擎就显示本身真实的ip
    #这样搜索引擎ip就不能存到limit_req_zone内存session中,所以不会限制搜索引擎的ip访问
    map $limited $allips {
        1 $binary_remote_addr;
        0 "";
    }

    upstream backend {
        zone backend 64k;
        #weight 指定轮询几率,weight和访问比率成正比,用于后端服务器性能不均的情况,后端服务器down掉,能自动剔除
        #ip_hash 每个请求按访问ip的hash结果分配,这样每个访客固定访问一个后端服务器,可以解决session不能跨服务器的问题,后端服务器down掉,要手工down掉
        #fair 后端服务器的响应时间来分配请求,响应时间短的优先分配
        #url_hash 访问url的hash结果来分配请求,使每个url定向到同一个后端服务器,后端服务器为缓存服务器时比较有效,不能写入weight等其他的参数
        #         hash $request_uri;
        #         hash_method crc32;
        #least_conn 请求会被转发到连接数最少的服务器
        least_conn;
        #down 表示当前的server暂时不参与负载
        #weight 默认为1,weight越大,负载的权重就越大
        #max_fails 允许请求失败的次数默认为1,当超过最大次数时,返回proxy_next_upstream模块定义的错误
        #fail_timeout max_fails次失败后,暂停的时间
        #backup 其它所有的非backup机器down或者忙的时候,请求backup机器,所以这台机器压力会最轻
        server 127.0.0.1:7100 weight=1 max_fails=3 fail_timeout=30;
        server 127.0.0.1:8100 weight=1 max_fails=3 fail_timeout=30;
        #每个worker和upstream保持的长连接数
        #10000QPS和100毫秒响应时间可以推算出的长连接数大概是1000,将keepalive设置为这个长连接数的10%到50%
        #当然不考虑资源消耗的话,直接设置为keepalive=1000也OK
        keepalive 500;
    }

    server {
        listen 80;
        server_name localhost;

        access_log /home/logs/nginx/localhost80.access.log main;

        location / {
            root html;
            index index.html index.htm;
            #路由重写
            try_files $uri $uri/ /index.php$is_args$args;
        }

        location /ngx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }

        location /phpfpm_status {
            include fastcgi_params;
            fastcgi_pass 127.0.0.1:9000;
            fastcgi_param SCRIPT_FILENAME $fastcgi_script_name;
            fastcgi_param HTTPS on;
            fastcgi_param HTTP_SCHEME https;
            allow 127.0.0.1;
            deny all;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }

    server {
        listen 8080;
        server_name localhost;
        root /home/jw;
        index index.php index.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root html;
        }

        #https配置
        listen 8080 ssl http2 default_server;
        ssl on;
        # 密钥生成 openssl dhparam -out dhparam.pem 2048
        ssl_dhparam /xxx/dhparam.pem;
        ssl_certificate /xxx/server.crt;
        ssl_certificate_key /xxx/server.key;
        ssl_session_cache shared:SSL:5m;
        ssl_session_timeout 30m;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers 'ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA';
        ssl_prefer_server_ciphers on;
        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload" always;
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_trusted_certificate /etc/nginx/cert/trustchain.crt;
        resolver 8.8.8.8 8.8.4.4 valid=300s;

        access_log /home/logs/nginx/localhost8080.access.log main;

        #路由重写,以下例子将路由 /search/abcde重写到/Index/Image/index?callback=dfasx&keyword=abcde,其中abcde为/search/后面的字符串
        rewrite ^/search\/([^\/]+?)(\/|$) /Index/Image/index?callback=dfasx&keyword=$1 permanent;

        location / {
            #brust-漏桶数
            #  如果第1,2,3,4秒请求为19个,第5秒的请求为25个是被允许的
            #  如果你第1秒就25个请求,第2秒超过20的请求返回503错误
            #nodelay
            #  不设置:严格使用平均速率限制请求数,第1秒25个请求时,5个请求放到第2秒执行
            #  设置:25个请求将在第1秒执行
            limit_req zone=allips burst=5 nodelay;

            #连接数限制
            limit_conn one 20;
            #带宽限制,对单个连接限数,如果一个ip两个连接,就是500x2k
            limit_rate 500k;

            proxy_pass http://backend;
            proxy_redirect off;
            #忽略客户端中断
            proxy_ignore_client_abort on;
            #HTTP协议中对长连接的支持是从1.1版本之后才有
            proxy_http_version 1.1;
            #nginx跟后端服务器连接超时时间
            proxy_connect_timeout 10;
            #nginx读取后端服务器响应的超时时间
            proxy_read_timeout 10;
            #nginx发送后端服务器数据的超时时间
            proxy_send_timeout 30;
            #缓冲区,nginx针对单个连接缓存来自后端服务器的响应
            proxy_buffers 4 32k;
            #nginx从后端服务器读取并保存用户头信息的缓冲区大小
            proxy_buffer_size 4k;
            #高负荷下缓冲大小
            proxy_busy_buffers_size 64k;
            proxy_set_header Host $host;
            proxy_set_header Connection "";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Real-Port $remote_port;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;

            add_header Via "nginx";
        }
        #动静分离,静态文件配置
        location ~ .*\.(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css)$ {
            root /home/jw/phpspace/swooleyaf/static;
            expires 10m;
        }
        location ~ /\.ht {
            deny all;
        }
    }

    # HTTPS server
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

    #$args此变量与请求行中的参数相等
    #$content_length等于请求行的“Content_Length”的值。
    #$content_type等同与请求头部的”Content_Type”的值
    #$document_root等同于当前请求的root指令指定的值
    #$document_uri与$uri一样
    #$host与请求头部中“Host”行指定的值或是request到达的server的名字（没有Host行）一样
    #$limit_rate允许限制的连接速率
    #$request_method等同于request的method,通常是“GET”或“POST”
    #$remote_addr客户端ip
    #$remote_port客户端port
    #$remote_user等同于用户名,由ngx_http_auth_basic_module认证
    #$request_filename当前请求的文件的路径名,由root或alias和URI request组合而成
    #$request_body_file
    #$request_uri含有参数的完整的初始URI
    #$query_string与$args一样
    #$sheeme http模式（http,https）尽在要求是评估例如
    #Rewrite ^(.+)$ $sheme://example.com$; Redirect;
    #$server_protocol等同于request的协议,使用“HTTP/或“HTTP/
    #$server_addr request到达的server的ip,一般获得此变量的值的目的是进行系统调用。为了避免系统调用,有必要在listen指令中指明ip,并使用bind参数。
    #$server_name请求到达的服务器名
    #$server_port请求到达的服务器的端口号
    #$uri等同于当前request中的URI,可不同于初始值,例如内部重定向时或使用index
}

#stream配置
stream {
    upstream backend2 {
        zone backend2 64k;
        least_conn;
        server 172.16.1.11:8081 weight=1 max_fails=3 fail_timeout=10s;
        server 172.16.1.22:8081 weight=1 max_fails=3 fail_timeout=10s;
    }
    server {
        listen 8081 so_keepalive=on;
        tcp_nodelay on;
        proxy_connect_timeout 1s;
        proxy_timeout 3s;
        proxy_pass backend2;
    }
}
